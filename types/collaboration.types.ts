// Collaboration types
export interface InviteCollaboratorDto {
  email: string;
  permission: 'READ' | 'COMMENT' | 'EDIT' | 'ADMIN';
  message?: string;
}

export interface UpdatePermissionDto {
  permission: 'READ' | 'COMMENT' | 'EDIT' | 'ADMIN';
}

export interface Collaborator {
  id: string;
  userId: string;
  noteId: string;
  permission: 'READ' | 'COMMENT' | 'EDIT' | 'ADMIN';
  status: 'PENDING' | 'ACCEPTED' | 'DECLINED';
  invitedAt: string;
  acceptedAt?: string;
  user: {
    id: string;
    email: string;
    name?: string;
    image?: string;
  };
}

export interface CollaborationStats {
  totalCollaborations: number;
  activeCollaborations: number;
  pendingInvitations: number;
  sharedNotes: number;
}

export interface CursorUpdate {
  noteId: string;
  position: number;
  userId: string;
  timestamp: string;
}

// Share types
export interface CreateShareLinkDto {
  expiresAt?: string;
  password?: string;
  allowDownload?: boolean;
  allowPrint?: boolean;
  trackViews?: boolean;
}

export interface UpdateShareLinkDto {
  expiresAt?: string;
  password?: string;
  allowDownload?: boolean;
  allowPrint?: boolean;
  trackViews?: boolean;
  isActive?: boolean;
}

export interface ShareLink {
  id: string;
  token: string;
  noteId: string;
  isActive: boolean;
  expiresAt?: string;
  password?: string;
  allowDownload: boolean;
  allowPrint: boolean;
  trackViews: boolean;
  viewCount: number;
  lastViewedAt?: string;
  createdAt: string;
  updatedAt: string;
  note: {
    id: string;
    title: string;
    ownerId: string;
  };
}

export interface ShareAnalytics {
  totalViews: number;
  uniqueVisitors: number;
  viewHistory: Array<{
    date: string;
    views: number;
  }>;
  geographicData: Array<{
    country: string;
    views: number;
  }>;
  referrers: Array<{
    source: string;
    views: number;
  }>;
}

export interface ShareStats {
  totalSharedNotes: number;
  activeLinks: number;
  totalViews: number;
  topSharedNotes: Array<{
    noteId: string;
    title: string;
    views: number;
  }>;
}

// Versions types
export interface CreateVersionDto {
  message?: string;
  tags?: string[];
}

export interface NoteVersion {
  id: string;
  noteId: string;
  version: number;
  title: string;
  content: string;
  tags: string[];
  message?: string;
  isAutoGenerated: boolean;
  createdAt: string;
  author: {
    id: string;
    name?: string;
    email: string;
  };
}

export interface VersionComparison {
  from: NoteVersion;
  to: NoteVersion;
  changes: Array<{
    type: 'addition' | 'deletion' | 'modification';
    field: 'title' | 'content' | 'tags';
    oldValue?: string;
    newValue?: string;
    position?: number;
  }>;
}

export interface VersionStatistics {
  totalVersions: number;
  autoGeneratedVersions: number;
  manualVersions: number;
  averageVersionsPerNote: number;
  lastVersionCreated: string;
}

export interface VersionTimeline {
  versions: Array<{
    id: string;
    version: number;
    message?: string;
    isAutoGenerated: boolean;
    createdAt: string;
    author: {
      name?: string;
      email: string;
    };
  }>;
  milestones: Array<{
    date: string;
    event: string;
    description: string;
  }>;
}

// Activities types
export interface Activity {
  id: string;
  userId: string;
  type: 'NOTE_CREATED' | 'NOTE_UPDATED' | 'NOTE_DELETED' | 'WORKSPACE_CREATED' | 'COLLABORATION_INVITED' | 'EXPORT_COMPLETED';
  entityId: string;
  entityType: 'NOTE' | 'WORKSPACE' | 'COLLABORATION';
  metadata: Record<string, any>;
  createdAt: string;
  user: {
    id: string;
    name?: string;
    email: string;
  };
}

export interface ActivityInsights {
  mostActiveHours: Array<{ hour: number; count: number }>;
  mostActiveDays: Array<{ day: string; count: number }>;
  activityTrends: Array<{ date: string; count: number }>;
  topActivities: Array<{ type: string; count: number }>;
}

export interface ActivityFeed {
  activities: Activity[];
  hasMore: boolean;
  nextCursor?: string;
}

export interface ActivityStats {
  todayCount: number;
  weekCount: number;
  monthCount: number;
  totalCount: number;
  streakDays: number;
  averagePerDay: number;
}

export interface TrackActivityDto {
  type: Activity['type'];
  entityId: string;
  entityType: Activity['entityType'];
  metadata?: Record<string, any>;
}

export interface ProductivityHeatmap {
  date: string;
  value: number;
  level: 0 | 1 | 2 | 3 | 4;
}

// Tags types
export interface CreateTagDto {
  name: string;
  color?: string;
  description?: string;
  parentId?: string;
}

export interface UpdateTagDto {
  name?: string;
  color?: string;
  description?: string;
  parentId?: string;
}

export interface Tag {
  id: string;
  name: string;
  color?: string;
  description?: string;
  parentId?: string;
  ownerId: string;
  createdAt: string;
  updatedAt: string;
  parent?: Tag;
  children?: Tag[];
  _count?: {
    notes: number;
    children: number;
  };
}

export interface TagHierarchy {
  id: string;
  name: string;
  color?: string;
  level: number;
  children: TagHierarchy[];
  noteCount: number;
}

export interface TagAnalytics {
  totalTags: number;
  averageTagsPerNote: number;
  mostUsedTags: Array<{
    tag: Tag;
    usage: number;
  }>;
  recentlyCreated: Tag[];
  unusedTags: Tag[];
}

export interface TagSuggestion {
  tag: string;
  confidence: number;
  existing: boolean;
  tagId?: string;
}

export interface BulkTagOperationDto {
  operation: 'DELETE' | 'MERGE' | 'RENAME';
  tagIds: string[];
  targetTagId?: string; // For merge operation
  newName?: string; // For rename operation
}