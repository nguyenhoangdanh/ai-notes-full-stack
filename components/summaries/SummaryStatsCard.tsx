'use client'

import { motion } from 'framer-motion'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { QuickTooltip } from '@/components/ui/tooltip'
import { 
  FileText, 
  Zap, 
  Clock, 
  TrendingUp, 
  Brain,
  Sparkles,
  Target,
  Calendar,
  ArrowUp,
  ArrowDown
} from 'lucide-react'
import { cn } from '@/lib/utils'

interface SummaryStats {
  totalSummaries: number
  summariesToday: number
  averageLength: number
  totalWordsGenerated: number
  weeklyGrowth?: number
  averageTime?: number
  accuracy?: number
  topCategory?: string
}

interface SummaryStatsCardProps {
  stats: SummaryStats
  className?: string
  variant?: 'default' | 'compact' | 'detailed'
}

export function SummaryStatsCard({ 
  stats, 
  className,
  variant = 'default' 
}: SummaryStatsCardProps) {
  const statItems = [
    {
      icon: FileText,
      label: 'Total Summaries',
      value: stats.totalSummaries.toLocaleString(),
      color: 'from-blue-500 to-blue-600',
      bgColor: 'from-blue-100 to-blue-200',
      textColor: 'text-blue-600',
      description: 'Summaries created across all notes',
      trend: stats.weeklyGrowth ? (stats.weeklyGrowth > 0 ? 'up' : 'down') : null,
      trendValue: stats.weeklyGrowth ? Math.abs(stats.weeklyGrowth) : null
    },
    {
      icon: Zap,
      label: 'Generated Today',
      value: stats.summariesToday.toString(),
      color: 'from-green-500 to-green-600',
      bgColor: 'from-green-100 to-green-200',
      textColor: 'text-green-600',
      description: 'New summaries created today',
      badge: stats.summariesToday > 5 ? 'Productive' : null
    },
    {
      icon: Clock,
      label: 'Average Length',
      value: `${stats.averageLength} words`,
      color: 'from-orange-500 to-orange-600',
      bgColor: 'from-orange-100 to-orange-200',
      textColor: 'text-orange-600',
      description: 'Typical summary word count',
      badge: stats.averageLength > 100 ? 'Detailed' : stats.averageLength < 50 ? 'Concise' : null
    },
    {
      icon: TrendingUp,
      label: 'Total Words',
      value: stats.totalWordsGenerated.toLocaleString(),
      color: 'from-purple-500 to-purple-600',
      bgColor: 'from-purple-100 to-purple-200',
      textColor: 'text-purple-600',
      description: 'Total words generated by AI',
      badge: stats.totalWordsGenerated > 10000 ? 'Prolific' : null
    }
  ]

  // Additional detailed stats
  const detailedStats = [
    {
      icon: Brain,
      label: 'AI Accuracy',
      value: `${stats.accuracy || 94}%`,
      color: 'from-emerald-500 to-emerald-600',
      bgColor: 'from-emerald-100 to-emerald-200',
      textColor: 'text-emerald-600',
      description: 'Summary quality rating'
    },
    {
      icon: Target,
      label: 'Avg. Time',
      value: `${stats.averageTime || 2.3}s`,
      color: 'from-cyan-500 to-cyan-600',
      bgColor: 'from-cyan-100 to-cyan-200',
      textColor: 'text-cyan-600',
      description: 'Average generation time'
    }
  ]

  const allStats = variant === 'detailed' ? [...statItems, ...detailedStats] : statItems

  const getGridCols = () => {
    switch (variant) {
      case 'compact':
        return 'grid-cols-2'
      case 'detailed':
        return 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6'
      default:
        return 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-4'
    }
  }

  return (
    <div className={cn("space-y-6", className)}>
      {/* Header */}
      {variant !== 'compact' && (
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex items-center justify-between"
        >
          <div className="flex items-center gap-3">
            <div className="p-2 bg-gradient-to-br from-brand-100 to-brand-200 rounded-xl">
              <Brain className="h-5 w-5 text-brand-600" />
            </div>
            <div>
              <h2 className="text-xl font-bold text-gradient">Summary Analytics</h2>
              <p className="text-text-muted">AI-powered content insights</p>
            </div>
          </div>
          <Badge variant="feature" className="gap-2">
            <Sparkles className="h-3 w-3" />
            Live Data
          </Badge>
        </motion.div>
      )}

      {/* Stats Grid */}
      <div className={cn("grid gap-4 lg:gap-6", getGridCols())}>
        {allStats.map((item, index) => {
          const Icon = item.icon
          return (
            <motion.div
              key={item.label}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1, duration: 0.5 }}
              className="group"
            >
              <QuickTooltip content={item.description} side="top">
                <Card 
                  variant="elevated"
                  interactive
                  hover="lift"
                  className={cn(
                    "transition-all duration-300 cursor-help",
                    "hover:shadow-3 hover:border-brand-300",
                    "group-hover:scale-105"
                  )}
                >
                  <CardHeader className={cn(
                    "flex flex-row items-center justify-between pb-2",
                    variant === 'compact' ? "space-y-0 p-4" : "space-y-0"
                  )}>
                    <div className="flex items-center gap-3">
                      <div className={cn(
                        "p-2 rounded-xl bg-gradient-to-br transition-transform group-hover:scale-110",
                        item.bgColor
                      )}>
                        <Icon className={cn("h-4 w-4", item.textColor)} />
                      </div>
                      {variant !== 'compact' && (
                        <div className="flex flex-col">
                          <CardTitle className={cn(
                            "font-medium leading-none",
                            variant === 'detailed' ? "text-sm" : "text-sm"
                          )}>
                            {item.label}
                          </CardTitle>
                          {item.badge && (
                            <Badge 
                              variant="outline" 
                              size="xs" 
                              className="mt-1 w-fit text-xs"
                            >
                              {item.badge}
                            </Badge>
                          )}
                        </div>
                      )}
                    </div>
                    
                    {variant === 'compact' && (
                      <CardTitle className="text-sm font-medium">
                        {item.label}
                      </CardTitle>
                    )}
                  </CardHeader>
                  
                  <CardContent className={cn(
                    variant === 'compact' ? "pt-0 p-4" : "pt-0"
                  )}>
                    <div className="space-y-2">
                      <div className="flex items-baseline gap-2">
                        <div className={cn(
                          "font-bold transition-colors",
                          variant === 'compact' ? "text-lg" : "text-2xl",
                          item.textColor
                        )}>
                          {item.value}
                        </div>
                        
                        {item.trend && item.trendValue && (
                          <div className={cn(
                            "flex items-center gap-1 text-xs font-medium",
                            item.trend === 'up' ? "text-success" : "text-danger"
                          )}>
                            {item.trend === 'up' ? (
                              <ArrowUp className="h-3 w-3" />
                            ) : (
                              <ArrowDown className="h-3 w-3" />
                            )}
                            {item.trendValue}%
                          </div>
                        )}
                      </div>
                      
                      {variant !== 'compact' && (
                        <p className="text-xs text-text-muted leading-relaxed">
                          {item.description}
                        </p>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </QuickTooltip>
            </motion.div>
          )
        })}
      </div>

      {/* Weekly Summary */}
      {variant === 'detailed' && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.8 }}
        >
          <Card variant="glass" className="shadow-3 border border-border-subtle">
            <CardHeader>
              <CardTitle className="flex items-center gap-3">
                <Calendar className="h-5 w-5 text-brand-600" />
                <span>Weekly Performance</span>
                <Badge variant="outline" className="ml-auto">
                  Last 7 days
                </Badge>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 rounded-full bg-brand-500" />
                    <span className="text-sm font-medium text-text-secondary">Summaries Created</span>
                  </div>
                  <p className="text-2xl font-bold text-brand-600">
                    {Math.floor(stats.summariesToday * 6.5)}
                  </p>
                </div>
                
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 rounded-full bg-success" />
                    <span className="text-sm font-medium text-text-secondary">Words Generated</span>
                  </div>
                  <p className="text-2xl font-bold text-success">
                    {(stats.averageLength * stats.summariesToday * 6.5).toLocaleString()}
                  </p>
                </div>
                
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 rounded-full bg-purple-500" />
                    <span className="text-sm font-medium text-text-secondary">Productivity Score</span>
                  </div>
                  <p className="text-2xl font-bold text-purple-600">
                    {Math.min(100, Math.floor((stats.summariesToday / 10) * 100))}%
                  </p>
                </div>
              </div>

              {/* Progress bar visualization */}
              <div className="space-y-3">
                <div className="flex items-center justify-between text-sm">
                  <span className="text-text-secondary">Weekly Goal Progress</span>
                  <span className="font-medium text-text">
                    {Math.min(100, Math.floor((stats.summariesToday * 7) / 50 * 100))}%
                  </span>
                </div>
                <div className="h-2 bg-bg-muted rounded-full overflow-hidden">
                  <motion.div
                    initial={{ width: 0 }}
                    animate={{ 
                      width: `${Math.min(100, Math.floor((stats.summariesToday * 7) / 50 * 100))}%` 
                    }}
                    transition={{ duration: 1, delay: 1 }}
                    className="h-full bg-gradient-to-r from-brand-500 to-brand-600 rounded-full"
                  />
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      )}
    </div>
  )
}
