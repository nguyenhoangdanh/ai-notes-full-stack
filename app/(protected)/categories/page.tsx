'use client'

import { useState } from 'react'
import { Plus, Folder, Hash, Edit, Trash2, Search, Brain, Tag, Sparkles, Filter, MoreHorizontal, TrendingUp } from 'lucide-react'
import { Category } from '@/types'
import { useCategories, useCreateCategory, useDeleteCategory, useUpdateCategory } from '@/hooks'
import { Badge, Button, EmptyState, GradientCallout, PageHeader, Panel, SearchInput, SkeletonCard, StatCard, Toggle, Toolbar, ToolbarSection } from '@/components/ui'
import { CategoryCreateDialog } from '@/components/categories/CategoryCreateDialog'
import { CategoryEditDialog } from '@/components/categories/CategoryEditDialog'

// Force dynamic rendering to avoid SSR issues
export const dynamic = 'force-dynamic'


export default function CategoriesPage() {
  const [searchQuery, setSearchQuery] = useState('')
  const [showCreateDialog, setShowCreateDialog] = useState(false)
  const [editingCategory, setEditingCategory] = useState<Category | null>(null)
  const [deletingCategory, setDeletingCategory] = useState<Category | null>(null)
  const [showAutoOnly, setShowAutoOnly] = useState(false)
  const [showManualOnly, setShowManualOnly] = useState(false)

  const { data: categories, isLoading } = useCategories()
  const createCategory = useCreateCategory()
  const updateCategory = useUpdateCategory()
  const deleteCategory = useDeleteCategory()

  // Filter categories based on search and toggles
  const filteredCategories = categories?.filter(category => {
    const matchesSearch = category.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      category.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      category.keywords.some(keyword =>
        keyword.toLowerCase().includes(searchQuery.toLowerCase())
      )

    if (showAutoOnly && !category.isAuto) return false
    if (showManualOnly && category.isAuto) return false

    return matchesSearch
  }) || []

  const stats = {
    total: categories?.length || 0,
    autoGenerated: categories?.filter(cat => cat.isAuto).length || 15,
    categorizedNotes: 127,
    topCategory: 'Work'
  }

  const handleDeleteCategory = async () => {
    if (!deletingCategory) return
    
    try {
      await deleteCategory.mutateAsync(deletingCategory.id)
      setDeletingCategory(null)
    } catch (error) {
      console.error('Failed to delete category:', error)
    }
  }

  const handleOpenAIChat = () => {
    window.location.href = '/ai/chat'
  }

  const handleLearnMore = () => {
    // Navigate to documentation or help
  }

  if (isLoading) {
    return (
      <div className="space-y-8">
        <div className="animate-fade-in">
          <div className="skeleton h-8 w-64 rounded mb-4"></div>
          <div className="skeleton h-4 w-96 rounded"></div>
        </div>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
          {Array.from({ length: 4 }).map((_, i) => (
            <SkeletonCard key={i} className="h-32" />
          ))}
        </div>

        <SkeletonCard className="h-48" />
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {Array.from({ length: 6 }).map((_, i) => (
            <SkeletonCard key={i} className="h-40" />
          ))}
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-8">
      {/* Page Header */}
      <PageHeader
        title="Categories"
        subtitle="Organize and auto-categorize your notes with AI-powered insights"
        description="Our intelligent system analyzes your notes and automatically organizes them into meaningful categories based on keywords, context, and patterns."
        icon={Tag}
        badge={{ text: 'AI Enhanced', variant: 'ai' }}
        actions={
          <Button 
            variant="cta" 
            icon={Plus}
            onClick={() => setShowCreateDialog(true)}
          >
            New Category
          </Button>
        }
      />

      {/* 4 StatCards as per reference screenshot */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
        <StatCard
          title="Total Categories"
          value={stats.total}
          subtitle="All categories"
          delta={{
            value: 2,
            type: 'increase',
            period: 'this month'
          }}
          icon={Hash}
          iconColor="text-primary-600"
        />
        
        <StatCard
          title="Auto-Generated"
          value={stats.autoGenerated}
          subtitle="AI categories"
          delta={{
            value: 12,
            type: 'increase',
            period: 'new this week'
          }}
          icon={Brain}
          iconColor="text-purple"
        />
        
        <StatCard
          title="Categorized Notes"
          value={stats.categorizedNotes}
          subtitle="Notes assigned"
          delta={{
            value: 23,
            type: 'increase',
            period: 'this week'
          }}
          icon={Folder}
          iconColor="text-accent"
        />
        
        <StatCard
          title="Top Category"
          value={stats.topCategory}
          subtitle="Most notes assigned"
          icon={TrendingUp}
          iconColor="text-info"
        />
      </div>

      {/* GradientCallout for AI-Powered Auto-Categorization */}
      <GradientCallout
        variant="ai"
        size="md"
        title="AI-Powered Auto-Categorization"
        description="Our intelligent system analyzes your notes and automatically organizes them into meaningful categories based on keywords, context, and patterns."
        badge={{ text: "AI-Powered", variant: "ai" }}
        action={{
          label: "Start Auto-Categorizing",
          onClick: handleOpenAIChat,
          icon: Sparkles,
          variant: "primary"
        }}
        secondaryAction={{
          label: "Learn More",
          onClick: handleLearnMore
        }}
      />

      {/* Manage Categories Panel */}
      <Panel
        title="Manage Categories"
        subtitle={`${filteredCategories.length} categories`}
        icon={Tag}
        toolbar={
          <Toolbar size="sm" justify="end">
            <ToolbarSection>
              <SearchInput
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Search categories..."
                size="sm"
                className="w-64"
              />
            </ToolbarSection>
            
            <ToolbarSection>
              <Toggle
                checked={showAutoOnly}
                onChange={(e) => {
                  setShowAutoOnly(e.target.checked)
                  if (e.target.checked) setShowManualOnly(false)
                }}
                label="Auto-generated only"
                size="sm"
              />
            </ToolbarSection>
            
            <ToolbarSection>
              <Toggle
                checked={showManualOnly}
                onChange={(e) => {
                  setShowManualOnly(e.target.checked)
                  if (e.target.checked) setShowAutoOnly(false)
                }}
                label="Manual only"
                size="sm"
              />
            </ToolbarSection>

            <ToolbarSection>
              <Button 
                variant="cta" 
                size="sm" 
                icon={Plus}
                onClick={() => setShowCreateDialog(true)}
              >
                New Category
              </Button>
            </ToolbarSection>
          </Toolbar>
        }
      >
        {/* Categories Content */}
        {filteredCategories.length === 0 ? (
          <div className="py-8">
            <EmptyState
              icon={searchQuery ? Search : Tag}
              title={searchQuery ? "No categories found" : "No categories found"}
              description={
                searchQuery 
                  ? "Create your first category to start organizing your notes automatically with AI assistance."
                  : "Try adjusting your search terms or filters to find categories."
              }
              action={{
                label: searchQuery ? "Clear Search" : "Create Category",
                onClick: searchQuery ? () => setSearchQuery('') : () => setShowCreateDialog(true),
                icon: searchQuery ? Search : Plus,
                variant: "primary"
              }}
              secondaryAction={
                searchQuery ? {
                  label: "Create Category",
                  onClick: () => setShowCreateDialog(true),
                  icon: Plus
                } : undefined
              }
            />
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {filteredCategories.map((category) => (
              <div
                key={category.id}
                className="panel p-4 hover-lift transition-modern cursor-pointer group"
                onClick={() => setEditingCategory(category)}
              >
                <div className="flex items-start justify-between mb-3">
                  <div className="flex items-center gap-3">
                    <div className="w-10 h-10 rounded-lg bg-primary-600/10 flex items-center justify-center">
                      <Tag className="w-5 h-5 text-primary-600" />
                    </div>
                    <div>
                      <h3 className="font-semibold text-text group-hover:text-primary-600 transition-colors">
                        {category.name}
                      </h3>
                      <p className="text-sm text-text-muted">
                        {category._count?.notes || 0} notes
                      </p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-2">
                    {category.isAuto && (
                      <Badge variant="ai" size="sm">AI</Badge>
                    )}
                    <Button
                      variant="ghost"
                      size="sm"
                      icon={MoreHorizontal}
                      className="opacity-0 group-hover:opacity-100 transition-opacity"
                      onClick={(e) => {
                        e.stopPropagation()
                        // Show context menu
                      }}
                    />
                  </div>
                </div>
                
                {category.description && (
                  <p className="text-sm text-text-muted mb-3 line-clamp-2">
                    {category.description}
                  </p>
                )}
                
                {category.keywords && category.keywords.length > 0 && (
                  <div className="flex flex-wrap gap-1">
                    {category.keywords.slice(0, 3).map((keyword, index) => (
                      <Badge key={index} variant="default" size="sm">
                        {keyword}
                      </Badge>
                    ))}
                    {category.keywords.length > 3 && (
                      <Badge variant="default" size="sm">
                        +{category.keywords.length - 3}
                      </Badge>
                    )}
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </Panel>

      {/* Dialogs */}
      <CategoryCreateDialog
        open={showCreateDialog}
        onOpenChange={setShowCreateDialog}
        onSubmit={createCategory.mutateAsync}
        isLoading={createCategory.isPending}
      />

      {editingCategory && (
        <CategoryEditDialog
          open={true}
          onOpenChange={() => setEditingCategory(null)}
          category={editingCategory}
          onSubmit={(data) => updateCategory.mutateAsync({ id: editingCategory.id, data })}
          isLoading={updateCategory.isPending}
        />
      )}

      {/* Simple confirmation dialog for deletion */}
      {deletingCategory && (
        <div className="fixed inset-0 z-50 glass-bg backdrop-blur-xl flex items-center justify-center p-4">
          <div className="panel max-w-md w-full p-6 space-y-4">
            <div className="text-center space-y-2">
              <h3 className="text-lg font-semibold text-text">Delete Category</h3>
              <p className="text-text-muted">
                Are you sure you want to delete "{deletingCategory.name}"? This action cannot be undone.
              </p>
            </div>
            
            <div className="flex gap-3">
              <Button
                variant="secondary"
                className="flex-1"
                onClick={() => setDeletingCategory(null)}
              >
                Cancel
              </Button>
              <Button
                variant="danger"
                className="flex-1"
                onClick={handleDeleteCategory}
                loading={deleteCategory.isPending}
              >
                Delete
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
